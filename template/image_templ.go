// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Page() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n        #preview {\n            display: none;\n            margin: 20px 0;\n        }\n        img {\n            max-width: 100%;\n            height: auto;\n        }\n        .flat-upload-button {\n            display: inline-block;\n            padding: 10px 20px;\n            font-size: 16px;\n            color: #fff;\n            background-color: #007bff;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            text-align: center;\n            text-decoration: none;\n            transition: background-color 0.3s ease;\n        }\n        input[type=\"file\"] {\n            display: none; /* Hide the default file input */\n        }\n    </style><h1>Upload an Image</h1><form id=\"uploadForm\" enctype=\"multipart/form-data\"><label for=\"fileUpload\" class=\"flat-upload-button\">Upload Image</label> <input type=\"file\" id=\"fileUpload\" accept=\"image/png, image/jpeg\" onchange=\"previewImage(event)\" required><div id=\"preview\"><h2>Image Preview:</h2><img id=\"previewImg\" src=\"\" alt=\"Image Preview\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{templ.KV(button(), true)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<button type=\"submit\" id=\"encode\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `template/image.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-post=\"/encode\" hx-target=\"#response\" hx-swap=\"innerHTML\">Encode</button> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{templ.KV(button(), true)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<button type=\"submit\" id=\"decode\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `template/image.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-post=\"/decode\" hx-target=\"#response\" hx-swap=\"innerHTML\">Decode</button></form><div id=\"response\"><h1>Encoded Image</h1><img id=\"encodedImage\" src=\"\" alt=\"Encoded Image Preview\"></div><script>\n        document.getElementById(\"response\").style.display = 'none';\n        function previewImage(event) {\n            const file = event.target.files[0];\n            const preview = document.getElementById('preview');\n            const previewImg = document.getElementById('previewImg');\n\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    previewImg.src = e.target.result;\n                    previewImg.style.display = 'block';\n                    preview.style.display = 'block';\n                };\n                reader.readAsDataURL(file);\n            }\n        }\n\n        document.body.addEventListener('htmx:configRequest', function(event) {\n            const headers = {\n                'Content-Type': 'multipart/form-data', // Example custom header\n            };\n\n            // Add each header to the request\n            for (const key in headers) {\n                event.detail.headers[key] = headers[key];\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
